#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 模块可以比作一盒积木，通过它可以拼出多种主题的玩具，这与前面介绍的函数不同，一个函数仅相当于一块积木，而一个模块（.py 文件）中可以包含多个函数，也就是很多积木。
# 经过前面的学习，读者已经能够将 Python 代码写到一个文件中，但随着程序功能的复杂，程序体积会不断变大，为了便于维护，通常会将其分为多个文件（模块），这样不仅可以提高代码的可维护性，还可以提高代码的可重用性。
# 本节所介绍的模块，可以理解为是对代码更高级的封装，即把能够实现某一特定功能的代码编写在同一个 .py 文件中，并将其作为一个独立的模块，这样既可以方便其它程序或脚本导入并使用，同时还能有效避免函数名和变量名发生冲突。

# import 还有更多详细的用法，主要有以下两种：
# import 模块名1 [as 别名1], 模块名2 [as 别名2]，…：使用这种语法格式的 import 语句，会导入指定模块中的所有成员（包括变量、函数、类等）。不仅如此，当需要使用模块中的成员时，需用该模块名（或别名）作为前缀，否则 Python 解释器会报错。
# from 模块名 import 成员名1 [as 别名1]，成员名2 [as 别名2]，…： 使用这种语法格式的 import 语句，只会导入模块中指定的成员，而不是全部成员。同时，当程序中使用该成员时，无需附加任何前缀，直接使用成员名（或别名）即可。
# 注意，用 [] 括起来的部分，可以使用，也可以省略。

# 导入sys整个模块
import sys
# 使用 sys模块名 作为 前缀 来访问模块中的 成员
print(sys.argv[0])

# 导入sys整个模块，并指定别名为s
import sys as s
# 使用s模块别名作为前缀来访问模块中的成员
print(s.argv[0])

# 导入sys、os两个模块
import sys, os
# 使用 模块名 作为 前缀 来访问模块中的 成员
print(sys.argv[0])
# os模块的 sep变量 代表平台上的 路径分隔符
print(os.sep)
# 上面第 2 行代码一次导入了 sys 和 os 两个模块，因此程序要使用 sys、os 两个模块内的成员，只要分别使用 sys、os 模块名 作为 前缀 即可。

# 导入sys、os两个模块，并为sys指定别名s，为os指定别名o
import sys as s, os as o
# 使用模块别名作为前缀来访问模块中的成员
print(s.argv[0])
print(o.sep)

# 导入 sys模块 的 argv成员
from sys import argv
# 使用导入成员的语法，直接使用 成员名 访问
print(argv[0])

# 导入模块成员时，也可以为成员指定别名，例如如下程序：
# 导入 sys模块 的 argv成员，并为其指定 别名v
from sys import argv as v
# 使用导入 成员（并指定别名）的语法，直接使用 成员 的 别名 访问
print(v[0])
# 导入了 sys 模块中的 argv 成员，并为该成员指定别名 v，这样即可在程序中通过别名 v 使用 argv 成员，无须使用任何前缀。

# 导入 sys模块 的 argv, version 成员
from sys import argv, version
# 使用导入成员的语法，直接使用 成员名 访问
print(argv[0])
print(version)

# 导入sys模块的 argv, version 成员，并为其指定 别名v、wv
from sys import argv as v, version as wv
# 使用导入成员（并指定别名）的语法，直接使用成员的 别名 访问
print(v[0])
print(wv)

# 导入sys 棋块内的所有成员
from sys import *
# 使用导入成员的语法，直接使用 成员 的别名访问
print(argv[0])
print(version)

# Python包（存放多个模块的文件夹）
# 实际开发中，一个大型的项目往往需要使用成百上千的 Python 模块，如果将这些模块都堆放在一起，势必不好管理。而且，使用模块可以有效避免变量名或函数名重名引发的冲突，但是如果模块名重复怎么办呢？因此，Python提出了包（Package）的概念。
# 什么是包呢？简单理解，包就是文件夹，只不过在该文件夹下必须存在一个名为 “__init__.py” 的文件。注意，这是 Python 2.x 的规定，而在 Python 3.x 中，__init__.py 对包来说，并 不是必须 的。
# Python 库：相比 模块和包，库是一个更大的概念，例如在 Python 标准库 中的 每个库 都有好多个包，而每个包中都有若干个模块。

